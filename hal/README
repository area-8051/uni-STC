This Hardware Abstraction Layer (HAL) builds upon uni-STC to expose 
peripherals and features in an MCU-independent way.

In order to use it, create a project-defs.h file in your project's
directory, where you will include the selected MCU's header file from 
include/STC/, and of course add application-wide definitions you need,
such as pin assignments and other configuration choices.

Note applications using uni-STC are REQUIRED to define the MCU_FREQ 
macro to specify the MCU's desired operating frequency in Herz as an 
unsigned long. This should be done in the Makefile because stcgal also
needs this information.

Refer to the projects under the demos/ directory for examples of how 
to write your Makefile.

To port your application to another STC MCU (provided it has the 
features you need, of course), you just need to change project-defs.h 
and rebuild your project.

Internal dependencies between HAL modules are described in their 
respective header files. Headers may also describe optional macros
allowing to tweak memory footprint.

Note that the benefits of the HAL come at a price in terms of memory
footprint (both flash and RAM). From personal experience, 8KB flash
and 256 bytes RAM seems a bare minimum to write any decent application.

Some peripheral support is incomplete (e.g. uart-hal doesn't support 
9-bit mode), because I haven't had the need for all their features yet.

All STC periperals aren't supported yet (e.g. advanced PWM) for the 
same reason.

I'll add more as the need arises in the course of my projects.

I'm also aware documentation is... well, perfectible.
Feel free to ask if you have any question.
